arguments => expression ( "," expression )*
parameters => IDENTIFIER ( "," IDENTIFIER )*
function => IDENTIFIER "(" parameters? ")" stmt


program => decl* EOF

decl => funcDecl | varDecl | stmt

funcDecl => "function" function
varDecl => ( "var" | "final" ) IDENTIFIER ( "=" expression )? ";"

stmt => exprStmt | ifStmt | whileStmt | doWhileStmt | forStmt | exitStmt | block

exprStmt => expression ";"
ifStmt => "if" "(" expression ")" stmt ( "else" stmt )?
whileStmt => "while" "(" expression ")" stmt
doWhileStmt => "do" stmt "while" "(" expression ")" ";"
forStmt => "for" "(" ( varDecl | exprStmt | ";" ) expression? expression? ")" stmt
exitStmt => "exit" expression? ";"
block => "{" decl* "}"

expression => assignment
assignment => IDENTIFIER "=" assignment | logic_or

logic_or => logic_and ( "or" logic_and )*
logic_and => equality ( "and" equality )*

equality => comparison ( ( "!=" | "==" ) comparison )*
comparison => addition ( ( ">" | ">=" | "<" | "<=" ) addition )*

addition => multiplication ( ( "+" | "-" ) multiplication )*
multiplication => power ( ( "*" | "/" | "%" ) power )*
power => unary ( "^" unary )*

unary => ( "!" | "-" ) unary | call
call => primary ( "(" arguments? ")" )*

primary => NUMBER | STRING | "(" expression ")" | IDENTIFIER